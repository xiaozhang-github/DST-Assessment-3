
## A list of all libraries and functions used in my work.
## Kept for record purposes, reported in Section 7 - 'References'



###################   LIBRARIES   #####################

import glob
import os
import re
import random
import numpy as np
import pandas as pd
import math
from pathlib import Path
import matplotlib.pyplot as plt
import nltk
from nltk.corpus import stopwords

import gensim
import pickle

from nltk.stem import WordNetLemmatizer, SnowballStemmer
from nltk.stem.porter import *
import pyLDAvis.gensim

from gensim.models.coherencemodel import CoherenceModel
from sklearn.metrics import confusion_matrix, classification_report



###################### FUNCTIONS ######################

        ## This FUN does the text lemmatization:
def lemmatize_text(text):
    return [lemmatizer.lemmatize(w) for w in w_tokenizer.tokenize(text)]
    
        ## This FUN counts the occurences of a term in a list:
def countX(lst, x): 
    return lst.count(x)
    
        ## This FUN manually implements the TF (Term Frequency):
def computeTF(wordDict, bow):
    tfDict = {}
    bowCount = len(bow) # bow is a list of all terms in the document
    for word, count in wordDict.items():
        tfDict[word] = count/float(bowCount) # bowCount = counts the total number of terms in the document
    return tfDict

        ## This FUN manually implements the IDF (Inverse Document Frequency):
def computeIDF(docList):
    idfDict = {}
    N = len(docList)
    idfDict = dict.fromkeys(docList[0].keys(), 0)
    for doc in docList:
        for word, val in doc.items():
            if val>0:
                idfDict[word] = idfDict[word] + 1
    for word, val in idfDict.items():
        idfDict[word] = math.log10(N/float(val))
    return idfDict
        
        ## This FUN computes the Coherence metric of our model:
def getCoherence(m,t,d):
    coherence_model_lda = CoherenceModel(model=m,texts=t, dictionary=d, coherence='c_v')
    coherence_lda = coherence_model_lda.get_coherence()
    return(coherence_lda) # Need high coherence
    
        ## This FUN produces the confusion matrix:
 def classification_eval(y_true,y_pred):
    
    print("Confusion Matrix")
    C = confusion_matrix(y_true,y_pred)
    
    print('Classification report')
    print(classification_report(y_true, y_pred, target_names = ['Normal', 'Spam'], digits=3))
